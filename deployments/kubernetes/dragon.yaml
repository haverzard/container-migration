apiVersion: v1
kind: ServiceAccount
metadata:
  name: dragon-tf-operator
  namespace: kube-system

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dragon-tf-operator
rules:
- apiGroups: [""]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["kubeflow.org"]
  resources: ["*"]
  verbs: ["*"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dragon-tf-operator
subjects:
- kind: ServiceAccount
  name: dragon-tf-operator
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: dragon-tf-operator
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: Pod
metadata:
  name: dragon-tf-operator
  namespace: kube-system
  labels:
    app: dragon-tf-operator
spec:
  serviceAccountName: dragon-tf-operator
  priorityClassName: system-node-critical
  tolerations:
  - key: "CriticalAddonsOnly"
    operator: "Exists"
  - key: "node-role.kubernetes.io/master"
    operator: "Exists"
    effect: "NoSchedule"
  # affinity:
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #       nodeSelectorTerms:
  #       - matchExpressions:
  #         - key: "node-role.kubernetes.io/master"
  #           operator: "Exists"
  restartPolicy: Always
  containers:
  - name: dragon-tf-operator
    image: haverzard/dragon:0.1.0
    imagePullPolicy: Always
    command: ["DRAGON", "-alsologtostderr"]

---

apiVersion: v1
kind: Service
metadata:
  name: server-endpoint
  namespace: kube-system
  labels:
    k8s-app: dragon-tf-operator
spec:
  selector:
    app: dragon-tf-operator
  clusterIP: None
  ports:
  - name: api # Actually, no port is needed.
    port: 8769
    targetPort: 8769